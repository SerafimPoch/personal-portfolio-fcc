{"version":3,"sources":["components/Header/navbar/style.js","components/Header/navbar/index.js","components/Header/profession/style.js","components/Header/profession/index.js","containers/Header/style.js","containers/Header/index.js","containers/App/style.js","serviceWorker.js","index.js","containers/App/index.js"],"names":["NavbarContainer","styled","div","_templateObject","Navbar","nav","_templateObject2","navbar","react_default","a","createElement","href","ProfContainer","style_templateObject","profession","HeaderContainer","Header_style_templateObject","Header","Container","App_style_templateObject","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yiBAEO,IAAMA,EAAkBC,IAAOC,IAAVC,KAMfC,EAASH,IAAOI,IAAVC,KCLJC,EAAA,WACb,OACEC,EAAAC,EAAAC,cAACV,EAAD,KACEQ,EAAAC,EAAAC,cAACN,EAAD,KACEI,EAAAC,EAAAC,cAAA,KAAGC,KAAK,UAAR,SACAH,EAAAC,EAAAC,cAAA,KAAGC,KAAK,SAAR,QACAH,EAAAC,EAAAC,cAAA,KAAGC,KAAK,YAAR,4OCPD,IAAMC,EAAgBX,IAAOC,IAAVW,KCC1BC,EAAA,WACE,OACEN,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,wNCLC,IAAMK,EAAkBd,IAAOC,IAAVc,KCGbC,EAAA,WACb,OACET,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACI,EAAD,wMCPC,IAAMI,EAAYjB,IAAOC,IAAViB,KCQhBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAK1BC,QAAQC,IAAI,6CAGRb,EAAOc,UACTd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,EAAOe,WACTf,EAAOe,UAAUV,SAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCnFjEC,IAASC,OAAOvC,EAAAC,EAAAC,cCFD,WACb,OACEF,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAACO,EAAD,QDDU,MAAS+B,SAASC,eAAe,SDc1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,sBAAwB7B,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,sBAAN,sBAEP/B,GA2DV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEA/EAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MCxC/BE","file":"static/js/main.71a60d25.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const NavbarContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n`;\n\nexport const Navbar = styled.nav`\n  display: flex;\n  width: 30%;\n  justify-content: space-between;\n  margin-right: 30px;\n  padding: 30px;\n`;\n","import React from \"react\";\nimport { NavbarContainer, Navbar } from \"./style\";\n\nexport default () => {\n  return (\n    <NavbarContainer>\n      <Navbar>\n        <a href=\"#about\">About</a>\n        <a href=\"#work\">Work</a>\n        <a href=\"#contact\">Contact</a>\n      </Navbar>\n    </NavbarContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ProfContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  padding: 150px 0px 250px 0px;\n  width: 100%;\n  align-items: center;\n\n  p {\n    color: green;\n  }\n`;\n","import React from \"react\";\nimport { ProfContainer } from \"./style\";\n\nexport default () => {\n  return (\n    <ProfContainer>\n      <h1>Hey i'am Mimic.</h1>\n      <p>a web developer</p>\n    </ProfContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n  background-color: #e0ebe8;\n  width: 100%;\n`;\n","import React from \"react\";\nimport Navbar from \"../../components/Header/navbar\";\nimport Profession from \"../../components/Header/profession\";\nimport { HeaderContainer } from \"./style\";\n\nexport default () => {\n  return (\n    <HeaderContainer>\n      <Navbar />\n      <Profession />\n    </HeaderContainer>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n`;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./css/\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n","import React from \"react\";\nimport Header from \"../Header/\";\nimport { Container } from \"./style\";\n\nexport default () => {\n  return (\n    <Container>\n      <Header />\n    </Container>\n  );\n};\n"],"sourceRoot":""}